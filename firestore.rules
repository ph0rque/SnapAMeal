rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users
    // - Any authenticated user can read public user data (for searching).
    // - A user can only create, update, or delete their own user document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;

      // A user can only manage their own friends list.
      // Also allow updating friend data for streak tracking when snaps are sent
      match /friends/{friendId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow update: if request.auth != null && (
          request.auth.uid == userId || // Owner can update their own friends
          request.auth.uid == friendId || // Friend can update streak data when sending snaps
          (request.auth != null && 'streakCount' in request.resource.data) // Allow streak updates
        );
      }

      // User snaps subcollection
      // - Any authenticated user can create a snap for any user (sending snaps)
      // - Only the owner can read and update their own snaps
      match /snaps/{snapId} {
        allow create: if request.auth != null && 
                         request.resource.data.senderId is string &&
                         request.resource.data.receiverId is string &&
                         request.resource.data.receiverId == userId;
        allow read, update: if request.auth != null && request.auth.uid == userId;
        allow delete: if false; // Handled by backend
      }
    }

    // Chat Rooms
    // - A user can only read/write a chat room if they are a member or potential member.
    match /chat_rooms/{chatRoomId} {
      allow read: if request.auth != null && (
        // User is a member of existing chat room
        (resource != null && request.auth.uid in resource.data.members) ||
        // For one-on-one chats, allow if user ID is in the chat room ID (format: uid1_uid2)
        request.auth.uid in chatRoomId.split('_')
      );
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members;
      allow update, delete: if request.auth != null && request.auth.uid in resource.data.members;

      // Messages
      // - A user can only read/write messages in a chat they are a member of.
      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.members;
      }
    }

    // Snaps
    // - Sender must be the authenticated user.
    // - Only the receiver can read or update (to mark as viewed).
    // - No one can delete a snap (handled by backend).
    match /snaps/{snapId} {
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      allow read, update: if request.auth != null && request.auth.uid == resource.data.receiverId;
      allow delete: if false;
    }

    // Stories
    // - A user can only create a story for themself.
    // - Only friends of the user can read the stories.
    // - No one can update or delete (handled by backend).
    function isFriend(userId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
    }

    match /stories/{storyId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (isFriend(resource.data.userId) || request.auth.uid == resource.data.userId);
      allow update, delete: if false;
    }

  }
} 