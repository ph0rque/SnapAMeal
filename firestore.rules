rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users
    // - Any authenticated user can read public user data (for searching).
    // - A user can only create, update, or delete their own user document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // A user can only manage their own friends list.
      // Also allow updating friend data for streak tracking when snaps are sent
      match /friends/{friendId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // User snaps subcollection
      // - Any authenticated user can create a snap for any user (sending snaps)
      // - Only the owner can read and update their own snaps
      match /snaps/{snapId} {
        allow create: if request.auth != null && 
                         request.resource.data.senderId is string &&
                         request.resource.data.receiverId is string &&
                         request.resource.data.receiverId == userId;
        allow read, update: if request.auth != null && request.auth.uid == userId;
        allow delete: if false; // Handled by backend
      }
    }

    // Chat Rooms
    // - A user can only read/write a chat room if they are a member or potential member.
    match /chat_rooms/{chatRoomId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.members;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members;
      allow update, delete: if request.auth != null && request.auth.uid in resource.data.members;

      // Messages
      // - A user can only read/write messages in a chat they are a member of.
      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.members;
      }
    }

    // Snaps
    // - Sender must be the authenticated user.
    // - Only the receiver can read or update (to mark as viewed).
    // - No one can delete a snap (handled by backend).
    match /snaps/{snapId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      allow delete: if false;
    }

    // Stories
    // - A user can only create a story for themself.
    // - Only friends of the user can read the stories.
    // - No one can update or delete (handled by backend).
    function isFriend(userId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
    }

    match /stories/{storyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Friend Requests
    // - A user can send a friend request to anyone (create)
    // - A user can only read friend requests where they are the sender or receiver
    // - A user can update a friend request to accept/decline it if they are the receiver
    // - A user can delete a friend request if they are the sender or receiver
    match /friend_requests/{requestId} {
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );
      allow update: if request.auth != null && request.auth.uid == resource.data.receiverId;
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );
    }

    // Fasting sessions - users can only access their own sessions
    match /fastingSessions/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Sub-collections for fasting data
      match /sessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /history/{historyId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Fasting sessions (alternative structure used by the service)
    match /fasting_sessions/{sessionId} {
      allow read: if request.auth != null && 
        (resource == null || request.auth.uid == resource.data.user_id);
      allow write: if request.auth != null && 
        (resource == null || request.auth.uid == resource.data.user_id);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.user_id;
    }

    // Meal logs - users can only access their own meal logs
    match /mealLogs/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Individual meal log entries
      match /logs/{logId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && 
          request.auth.uid == userId &&
          // Validate required fields
          request.resource.data.keys().hasAll(['timestamp', 'imageUrl', 'recognitionResult']) &&
          // Validate data types
          request.resource.data.timestamp is timestamp &&
          request.resource.data.imageUrl is string &&
          request.resource.data.recognitionResult is map &&
          // Validate image URL is from Firebase Storage
          request.resource.data.imageUrl.matches('https://firebasestorage.googleapis.com/.*');
      }
    }

    // Nutrition data - users can only access their own nutrition data
    match /nutritionData/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Daily nutrition summaries
      match /daily/{date} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Weekly/monthly aggregations
      match /weekly/{weekId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /monthly/{monthId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Recipe suggestions - users can access their own and public recipes
    match /recipes/{recipeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy || 
         resource.data.isPublic == true);
    }

    // User recipe collections - private to each user
    match /userRecipes/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /saved/{recipeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /created/{recipeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Health insights and AI-generated content
    match /healthInsights/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /insights/{insightId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Knowledge base documents - read-only for authenticated users
    match /knowledgeBase/{documentId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can write (via server-side)
    }

    // User preferences and settings
    match /userPreferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // User settings (including fasting settings)
    match /user_settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Health profiles - users can only access their own health profile
    match /health_profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        // Validate required fields for health profile
        request.resource.data.keys().hasAll(['userId', 'createdAt', 'updatedAt']) &&
        request.resource.data.userId == userId;
    }

    // Analytics and usage data (anonymized)
    match /analytics/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Filter analytics - anonymous data collection
    match /filter_analytics/{documentId} {
      allow create: if request.auth != null;
      allow read: if false; // Only admin access
    }

    // User streaks - users can only access their own streaks
    match /user_streaks/{streakId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }

    // Shared streaks - users can read shared streaks and create their own
    match /shared_streaks/{sharedStreakId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }

    // Story engagement tracking
    match /story_engagement/{engagementId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }

    // AI advice - users can only access their own AI advice
    match /ai_advice/{adviceId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }

    // Meal logs - users can only access their own meal logs  
    match /meal_logs/{logId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.user_id;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.user_id;
    }

    // Health groups - users can read groups they are members of and create new groups
    match /health_groups/{groupId} {
      allow read: if request.auth != null && 
        (resource == null || request.auth.uid in resource.data.memberIds);
      allow write: if request.auth != null && 
        (resource == null || request.auth.uid in resource.data.memberIds || 
         request.auth.uid == resource.data.createdBy);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy;
    }

    // Health integrations - users can only access their own integrations
    match /health_integrations/{integrationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.user_id;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.user_id;
    }

    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if false; // Only server-side admin operations
    }

    // Helper function to validate meal log data structure
    function isValidMealLog(data) {
      return data.keys().hasAll(['timestamp', 'imageUrl', 'recognitionResult']) &&
        data.timestamp is timestamp &&
        data.imageUrl is string &&
        data.recognitionResult is map &&
        data.recognitionResult.keys().hasAll(['detectedFoods', 'totalNutrition', 'confidenceScore']) &&
        data.recognitionResult.detectedFoods is list &&
        data.recognitionResult.totalNutrition is map &&
        data.recognitionResult.confidenceScore is number &&
        data.recognitionResult.confidenceScore >= 0 &&
        data.recognitionResult.confidenceScore <= 1;
    }

    // Helper function to validate nutrition data
    function isValidNutritionData(data) {
      return data.keys().hasAll(['calories', 'protein', 'carbs', 'fat']) &&
        data.calories is number && data.calories >= 0 &&
        data.protein is number && data.protein >= 0 &&
        data.carbs is number && data.carbs >= 0 &&
        data.fat is number && data.fat >= 0;
    }
  }
} 